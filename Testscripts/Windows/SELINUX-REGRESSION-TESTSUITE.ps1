# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the Apache License.

<#
.Synopsis
    This test script runs the SELinux Regression TestSuite

.Description
	Main objective of this script is to perform kernel upgrade
#>

param(
		[string] $TestParams,
		[object] $AllVmData,
		[object] $CurrentTestData,
		[object] $TestProvider
)

function Main {
	param (
		$testParams,
		$allVMData,
		$currentTestData,
		$testProvider
    )

    # Test member variables initialization
	$currentTestResult = Create-TestResultObject
	$testResult = "ABORTED"
	$shellScriptName="selinux_testsuite.sh"

    # Local variables
	$testName=$currentTestData.testName
	$timeout = 600

    # Parse test parameters
    try {
		# Update all the packages so that latest kernel should be installed.
		$command = "yum update -y"
		$null = Run-LinuxCmd -username $global:user -password $global:password `
			-ip $allVMData.PublicIP -port $allVMData.SSHPort -command $command `
			-ignoreLinuxExitCode -runAsSudo -runMaxAllowedTime $timeout

		if (-not $testProvider.RestartAllDeployments($allVMData)) {
			Write-LogErr "Unable to connect to VM after restart!"
			$currentTestResult.TestResult = Get-FinalResultHeader -resultarr $testResult
			return $currentTestResult
		}

		$command = "bash /home/$user/$shellScriptName 1> ${testName}_summary.log 2>&1"
		$null = Run-LinuxCmd -username $global:user -password $global:password `
			-ip $allVMData.PublicIP -port $allVMData.SSHPort -command $command `
			-ignoreLinuxExitCode -runAsSudo -runMaxAllowedTime $timeout

		$command = "cat state.txt"
		$testState = Run-LinuxCmd -username  $global:user -password  $global:password `
			-ip $allVMData.PublicIP -port $allVMData.SSHPort -command $command `
			-ignoreLinuxExitCode -runAsSudo

		$testResult = Get-FinalResultHeader -resultarr $testState
		Write-LogInfo "$testName:: Result: $testResult"

		# Collect the logs generated by Linux test script
		$null = Collect-TestLogs -LogsDestination $LogDir -ScriptName $shellScriptName `
			-TestType "sh" -PublicIP $allVMData.PublicIP -SSHPort $allVMData.SSHPort `
			-Username $global:user -Password $global:password -TestName $testName
	} catch {
		$ErrorMessage =  $_.Exception.Message
		$ErrorLine = $_.InvocationInfo.ScriptLineNumber
		Write-LogErr "EXCEPTION : $ErrorMessage at line: $ErrorLine"
		$testResult = "FAIL"
	}
	$currentTestResult.TestResult = Get-FinalResultHeader -resultarr $testResult

	return $currentTestResult
}

Main -testParam (ConvertFrom-StringData $TestParams.Replace(";","`n")) `
	-allVMData $AllVmData -currentTestData $CurrentTestData -testProvider $TestProvider